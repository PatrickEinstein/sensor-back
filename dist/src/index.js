import "reflect-metadata";
import express from "express";
import http from "http";
import cors from "cors";
import swaggerUi from "swagger-ui-express";
import swaggerconfig from "./config/SwaggerUiDocs.js";
import ConnectDatabse from "./config/Database.js";
import NotificationJob from "./service/NotificationService.js";
import TestRouter from "./Routes/test.js";
import userRouter from "./Routes/userRouter.js";
import FileRouter from "./Routes/uploadFiles.js";
import upload from "./config/Multer.js";
import templateRouter from "./Routes/template.js";
import { UploaderController } from "./controller/uploadController.js";
import { IO } from "./config/Socket.js";
const app = express();
const server = http.createServer(app);
const io = IO(server);
app.use(cors());
app.use(express.json());
app.use(upload.any());
app.get("/api/docs.json", (req, res) => {
    res.setHeader("Content-Type", "application/json");
    res.send(swaggerconfig);
});
app.use("/api/docs", swaggerUi.serve, swaggerUi.setup(swaggerconfig));
app.use("/", TestRouter);
app.use("/", userRouter);
const uploaderController = new UploaderController(io);
app.use(FileRouter(uploaderController));
app.use("/", templateRouter);
const PORT = process.env.PORT ? parseInt(process.env.PORT, 10) : 5000;
const uri = process.env.DB_URI ? process.env.DB_URI : "";
ConnectDatabse(server, PORT, uri);
NotificationJob(io);
